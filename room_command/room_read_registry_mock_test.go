// Code generated by MockGen. DO NOT EDIT.
// Source: room_query/room_query_service.go

// Package room_command_test is a generated GoMock package.
package room_command_test

import (
	gomock "github.com/golang/mock/gomock"
	room_read_registry "kata/cqrs_booking/room_read_registry"
	reflect "reflect"
	time "time"
)

// MockRoomReadRegistry is a mock of RoomReadRegistry interface
type MockRoomReadRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockRoomReadRegistryMockRecorder
}

// MockRoomReadRegistryMockRecorder is the mock recorder for MockRoomReadRegistry
type MockRoomReadRegistryMockRecorder struct {
	mock *MockRoomReadRegistry
}

// NewMockRoomReadRegistry creates a new mock instance
func NewMockRoomReadRegistry(ctrl *gomock.Controller) *MockRoomReadRegistry {
	mock := &MockRoomReadRegistry{ctrl: ctrl}
	mock.recorder = &MockRoomReadRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoomReadRegistry) EXPECT() *MockRoomReadRegistryMockRecorder {
	return m.recorder
}

// FreeRooms mocks base method
func (m *MockRoomReadRegistry) FreeRooms(arrival, departure time.Time) []room_read_registry.Room {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FreeRooms", arrival, departure)
	ret0, _ := ret[0].([]room_read_registry.Room)
	return ret0
}

// FreeRooms indicates an expected call of FreeRooms
func (mr *MockRoomReadRegistryMockRecorder) FreeRooms(arrival, departure interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FreeRooms", reflect.TypeOf((*MockRoomReadRegistry)(nil).FreeRooms), arrival, departure)
}

// BookRoom mocks base method
func (m *MockRoomReadRegistry) BookRoom(name string, arrival, departure time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BookRoom", name, arrival, departure)
}

// BookRoom indicates an expected call of BookRoom
func (mr *MockRoomReadRegistryMockRecorder) BookRoom(name, arrival, departure interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookRoom", reflect.TypeOf((*MockRoomReadRegistry)(nil).BookRoom), name, arrival, departure)
}
