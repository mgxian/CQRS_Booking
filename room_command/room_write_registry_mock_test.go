// Code generated by MockGen. DO NOT EDIT.
// Source: room_command/room_command_service.go

// Package room_command_test is a generated GoMock package.
package room_command_test

import (
	gomock "github.com/golang/mock/gomock"
	"kata/cqrs_booking/room_write_registry"
	reflect "reflect"
)

// MockRoomWriteRegistry is a mock of RoomWriteRegistry interface
type MockRoomWriteRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockRoomWriteRegistryMockRecorder
}

// MockRoomWriteRegistryMockRecorder is the mock recorder for MockRoomWriteRegistry
type MockRoomWriteRegistryMockRecorder struct {
	mock *MockRoomWriteRegistry
}

// NewMockRoomWriteRegistry creates a new mock instance
func NewMockRoomWriteRegistry(ctrl *gomock.Controller) *MockRoomWriteRegistry {
	mock := &MockRoomWriteRegistry{ctrl: ctrl}
	mock.recorder = &MockRoomWriteRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoomWriteRegistry) EXPECT() *MockRoomWriteRegistryMockRecorder {
	return m.recorder
}

// BookRoom mocks base method
func (m *MockRoomWriteRegistry) BookRoom(booking room_write_registry.Booking) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BookRoom", booking)
}

// BookRoom indicates an expected call of BookRoom
func (mr *MockRoomWriteRegistryMockRecorder) BookRoom(booking interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookRoom", reflect.TypeOf((*MockRoomWriteRegistry)(nil).BookRoom), booking)
}
